plugins {
  id 'com.android.application'
}
// 完整的方式  性能
def app_android = rootProject.ext.androidID
android {
  compileSdkVersion app_android.compileSdkVersion
  buildToolsVersion app_android.buildToolsVersion

  defaultConfig {
    applicationId appId.app
    minSdkVersion app_android.minSdkVersion
    targetSdkVersion app_android.targetSdkVersion
    versionCode app_android.versionCode
    versionName app_android.versionName

    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

    // 让我的Java代码也可以用
    // 给Java代码暴漏，标记，正式环境 和 测试环境 的标记
    // 组件化 和 集成化 的时候需要
    buildConfigField("boolean", "isRelease", String.valueOf(isRelease))


    // 都是为了 传递给 注解处理器
    // 在gradle文件中配置选项参数值（用于APT传参接收）
    // 切记：必须写在defaultConfig节点下
    javaCompileOptions {
      annotationProcessorOptions {
        // this.project.getName() == app
        // this.getProject().getName() == app
        arguments = [moduleName: project.getName(), packageNameForAPT: packageNameForAPT]
      }
    }
  }

  buildTypes {
    debug {
      buildConfigField("String", "debug", "\"${url.debug}\"")
    }
    release {
      buildConfigField("String", "release", "\"${url.release}\"")
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
    }
  }
  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }
}

dependencies {

  implementation fileTree(dir: "libs", include: ["*.jar"])

  /* implementation 'androidx.appcompat:appcompat:1.2.0'
   implementation 'com.google.android.material:material:1.2.1'
   implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
   testImplementation 'junit:junit:4.13.1'
   androidTestImplementation 'androidx.test.ext:junit:1.1.2'
   androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'*/

  dependenciesID.each { k, v -> implementation v }

  // 公共基础库
  implementation project(":common")
  // 注解模块
  implementation project(":arouter_annotation")

  // 注解处理器
  annotationProcessor project(':arouter_compiler')


  // 如果是集成化模式，做发布版本时。各个模块都不能独立运行了
  if (isRelease) {
    implementation project(':order') // 这样依赖时，必须是集成化，有柱状图， 否则会循环依赖问题
    implementation project(':personal') // 这样依赖时，必须是集成化，有柱状图， 否则会循环依赖问题
  }
}